#
# Mostly taken from
#
# - https://www.hamvocke.com/blog/a-guide-to-customizing-your-tmux-conf/
# - https://gist.github.com/spicycode/1229612
#
# Shoutout!
#
# ======================================================================

# evals tmux version
run-shell 'tmux setenv -g TMUX_VERSION $(tmux -V | \
                sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'

# increase scrollback buffer size
set -g history-limit 1000

# no delay for escape key press
set -sg escape-time 0

# start indexing on LHS of keyboard
set -g base-index 1
setw -g pane-base-index 1

# remap prefix from 'C-b' to 'C-a'
unbind C-b
set-option -g prefix C-a
bind-key C-a send-prefix

# split panes using | and -, make sure they open in the same path
bind | split-window -h -c "#{pane_current_path}"
bind - split-window -v -c "#{pane_current_path}"
unbind '"'
unbind %

# aliases for smoother in/out of shift key
bind \ split-window -h -c "#{pane_current_path}"
bind _ split-window -v -c "#{pane_current_path}"

# navigate between windows
# N.B. browsers and terminals use C-PageDown / C-PageUp
# N.B. browsers use M-Left / M-Right to go back / forward one page
# (no conflict here)
bind-key -n 'M-Left' 'previous-window'
bind-key -n 'M-Right' 'next-window'

# move windows
# N.B. browsers and terminals use S-C-PageDown / S-C-PageUp
bind-key -n 'S-M-Left' swap-window -t -1
bind-key -n 'S-M-Right' swap-window -t +1

# reload config file
bind r source-file ~/.tmux.conf \; display "Reloaded"
# respawn pane
bind R respawn-pane -k \; display "Respawn"

# Smart pane switching with awareness of Neovim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
#
# If using vim, using `-(hjkl) to navigate within vim splits
# (as Alt mapping do not work nicely in vim), Alt-(hjkl) should
# work to navigate between panes
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?nvim(diff)?$'"
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' 'select-pane -L'
bind-key -n 'M-j' if-shell "$is_vim" 'send-keys M-j' 'select-pane -D'
bind-key -n 'M-k' if-shell "$is_vim" 'send-keys M-k' 'select-pane -U'
bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' 'select-pane -R'

# Enable <c-Left>, <c-Right> back/up one word in shell prompt
set-window-option -g xterm-keys on

# Enable mouse mode (tmux 2.1 and above)
set -g mouse on

# Copy-Paste
# taken from: https://stackoverflow.com/a/40902312
set-window-option -g mode-keys vi
# versions < 2.4
# see also:
# https://www.rushiagr.com/blog/2016/06/16/everything-you-need-to-know-about-tmux-copy-pasting-ubuntu/
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.4" | bc)" = 1 ]' " \
    bind P paste-buffer; \
    bind-key -t vi-copy 'v'   begin-selection; \
    bind-key -t vi-copy 'V'   select-line; \
    bind-key -t vi-copy 'C-v' rectangle-toggle; \
    bind-key -t vi-copy 'y'   copy-selection; \
    bind     -t vi-copy y   copy-pipe 'xclip -selection clipboard -in'"
# versions < 2.9
if-shell -b '[ "$(echo "$TMUX_VERSION < 2.9" | bc)" = 1 ]' " \
    bind-key -T copy-mode-vi v   send -X begin-selection; \
    bind-key -T copy-mode-vi V   send -X select-line; \
    bind-key -T copy-mode-vi C-v send -X rectangle-toggle; \
    bind-key -T copy-mode-vi y   send -X copy-pipe-and-cancel 'xclip -selection clipboard -in'"

# Rather than constraining window size to the maximum size of any client
# connected to the *session*, constrain window size to the maximum size of any
# client connected to *that window*. Much more reasonable.
setw -g aggressive-resize on

# some theme
set -g status-bg black
set -g status-fg white
set -g window-status-current-bg white
set -g window-status-current-fg black
set -g window-status-current-attr bold
set -g status-interval 60
set -g status-left-length 30
set -g status-left '#[fg=green](#S) #(whoami)'
set -g status-right '#[fg=yellow]#(cut -d " " -f 1-3 /proc/loadavg)#[default] #[fg=white]%H:%M#[default]'
