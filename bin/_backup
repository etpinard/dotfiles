#! /bin/bash

DEST=${1:-/media/etienne/lexur16/}
BACKUPLIST=${2:-$HOME/BACKUPLIST.txt}

HOSTNAME=$(cat /etc/hostname 2> /dev/null || echo 'termux')
DATE=$(date +"%Y-%m-%d")
NAME="backup-$DATE-$HOSTNAME"

PARENT=$DEST/$NAME
FOLDER=$PARENT/backup

# rsync with common options
# a: archive mode
# h: output human-readable number
# R: (--relative) use relative path name
RSYNC="rsync -ahR"
# gitignore filter taken from:
# https://gist.github.com/theothermattm/5c73c4919dd48fee7581
# explicitly include .git/ and .gitignore which
# can sometimes be excluded by the .gitignore globs
FILTER=" --include=.git/ --include=.gitignore --filter=':- .gitignore'"

_sync () {
    pushd $HOME > /dev/null
    eval "$RSYNC --info=progress2 $FILTER $@ $FOLDER"
    popd > /dev/null
}

_sync_BACKUPLIST () {
    pushd $HOME > /dev/null
    echo "Copying BACKUPLIST.txt to $PARENT/"
    eval "$RSYNC BACKUPLIST.txt $PARENT/"
    popd > /dev/null
}

_dry () {
    pushd $HOME > /dev/null
    eval "${RSYNC}vn $FILTER $@ $FOLDER"
    popd > /dev/null
}

_main () {
    if [[ -d $DEST ]]; then
        if [[ $DEST == /media/etienne/* ]]; then
            free=$(df -h | grep ${DEST%/} | tr -s ' ' | cut -d' ' -f 4)
            echo "Destination $DEST is mounted with $free available"
        fi

        if [[ -d $PARENT ]]; then
            echo "ERROR: Backup folder $PARENT already exists. Exit"
            exit 1
        fi
        echo "Creating $FOLDER"
        mkdir -p $FOLDER
    else
        ADDR="${DEST%%:*}"
        FOLDER_REMOTE="${FOLDER#*:}"
        ssh -q $ADDR exit
        if [ $? -eq 0 ]; then
            echo "Can connect to $ADDR"
            echo "Creating $FOLDER_REMOTE on $ADDR"
            ssh $ADDR mkdir -p $FOLDER_REMOTE
        else
            echo "ERROR: Backup destination $DEST does not exist. Exit"
            exit 1
        fi
    fi

    # read BACKUPLIST line-by-line (not word-by-word)
    # in `items` array variable
    # https://stackoverflow.com/questions/11393817/read-lines-from-a-file-into-a-bash-array
    IFS=$'\r\n' command eval 'items=($(cat $BACKUPLIST))'
    # or maybe?
    # IFS=$'\n' read -d '' -r -a items < $BACKUPLIST

    total=0
    echo "List of paths to backup:"
    for i in "${items[@]}"; do
        if [[ "${i:0:1}" != "#" ]]; then
            size=$(_dry ${i} | tail -n 1 | cut -d ' ' -f 4)
            bytes=($(numfmt --from=iec $size))
            total=$(($total + $bytes))
            echo "- $i = $size"
        else
            echo "| skipping $i"
        fi
    done
    echo "Total: $(numfmt --to=iec $total)"

    read -r -p "Are you sure? [Y/N] " response
    case "$response" in
        [yY][eE][sS]|[yY])
            ;;
        [nN][oO]|[nN])
            echo "Backup canceled. Exit"
            rm -rf $PARENT
            exit 1
            ;;
        *)
            echo "ERROR: Invalid response. Exit"
            rm -rf $PARENT
            exit 1
            ;;
    esac

    _sync_BACKUPLIST
    for i in "${items[@]}"; do
        if [[ "${i:0:1}" != "#" ]]; then
            echo "Syncing $i"
            _sync $i
        fi
    done
}

_usage () {
cat << EOF
    Usage: _backup

    Personal backup script.

    Examples:

    # backup items in ~/BACKUPLIST.txt to my lexur16 USB stick in new folder "backup-yyyy-mm-dd/"
    - _backup

    # backup items in ~/BACKUPLIST.txt to ~/Destop/ (e.g. a somewhat dry run)
    - _backup ~/Destop

    # backup items in ~/BACKUPLIST.txt to remote server (via ssh)
    # (make sure to add your public key to the remote,
    #  to not have to enter your password multiple times,
    #  see http://www.linuxproblem.org/art_9.html for example)
    - _backup username@ip:/path/to/some/folder/

    # backup items in /path/to/some/other/BACKUPLIST.txt to /media/other/drive
    - _backup /media/other/drive /path/to/some/other/BACKUPLIST.txt

    Sample BACKUPLIST.txt:

    file.ext
    Documents/folder
    Documents/other/folder --exclude=subfolder
    # /commented/so/this/path/will/be/skipped/
    Pictures/ --exclude=subfolder --exclude=another/subfolder

    # TODO
    - add compress option
    - exit if there is not enough space on DEST

EOF
}

case $1 in
    --help | -h)
        _usage
        exit 0
        ;;
    *)
        _main
        ;;
esac
